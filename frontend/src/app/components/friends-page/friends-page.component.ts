import {Component, OnInit} from '@angular/core';
import {UserDetailDto, UserInfoDto, UserSearchDto} from '../../dtos/user';
import {Gender} from "../../enums/gender";
import {UserService} from "../../services/user.service";
import {Globals} from "../../global/globals";
import {InvitationService} from "../../services/invitation.service";
import {FriendshipRequest} from "../../dtos/invitations";
import {AuthService} from "../../services/auth.service";

@Component({
  selector: 'app-friends-page',
  templateUrl: './friends-page.component.html',
  styleUrls: ['./friends-page.component.scss']
})
export class FriendsPageComponent implements OnInit {
  searchQuery: UserSearchDto = {
    firstName: '',
    lastName: '',
    email: '',
    pageIndex: 0,
    pageSize: 10
  };
  users: UserInfoDto[] = []; // Holds the search results
  isLoading = false;
  alreadySent = []
  constructor(
    private userService: UserService,
    protected globals: Globals,
    private invitationService: InvitationService,
    private authService:AuthService
  ) {
  }

  ngOnInit(): void {
    const email  = this.authService.getUserEmail()
    this.invitationService.getUserSentFriendRequests(email).subscribe({
      next: (sentRequests) => {
        this.alreadySent = sentRequests;
        console.log(this.alreadySent)
      },
      error: (e) => {
        console.error('Error fetching sent friend requests:', e);
      },
    });
  }

  isAlreadySent(user: any): boolean {
    // Adjust the comparison logic based on how users are identified (e.g., by email, ID, etc.)
    console.log(this.alreadySent.some((sentRequest: any) => sentRequest.to.email === user.email))

    return this.alreadySent.some((sentRequest: any) => sentRequest.to.email === user.email);
  }



  searchUsers(): void {
    this.userService.searchFriends(this.searchQuery).subscribe({
      next: (data) => {
        // Assuming there's a property `users` in your component to hold the search results
        this.users = data;
        console.log('Search results:', this.users); // Log for debugging
      },
      error: (err) => {
        // Handle the error, e.g., display a message or log it
        console.error('Error fetching users:', err);
      },
      complete: () => {
        console.log('Search completed'); // Optional, if you want to do something after completion
      },
    });
  }



  sendFriendRequest(userTo: UserInfoDto): void {
    const request: FriendshipRequest = {
      friendRequestId: 0, // Assuming ID will be generated by the backend
      from: null,
      to: userTo,
      status: null,
      requestDateTime: null
    };
    this.invitationService.sendFriendRequest(request).subscribe({
      next: (response) => {
        console.log('Friend request sent successfully:', response);

        this.alreadySent.push(request)

        this.searchUsers()

      },
      error: (err) => {
        console.error('Error sending friend request:', err);
        // Handle error (e.g., show error message)
      }
    });
  }


  protected readonly prompt = prompt;


  getUserProfileImagePath(user: UserInfoDto): string {
    return user.profileImagePath
      ? `${this.globals.backendImageUri}${user.profileImagePath}`
      : 'assets/default-profile.png';
  }
}
